---
# Playbook de bootstrap para configuración inicial de servidores
# Este playbook debe ejecutarse SOLO LA PRIMERA VEZ con el usuario root
#
# Uso:
#   ansible-playbook -i inventories/production/hosts-bootstrap.yml playbooks/bootstrap.yml -u root --ask-pass --ask-become-pass
#
# Después de ejecutar este playbook, usar site.yml con el usuario efemaq

- name: Bootstrap initial server setup
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Configuración general (puede ser sobrescrita en group_vars)
    timezone: "America/Argentina/Buenos_Aires"
    locale: "es_ES.UTF-8"

    # Usuario que se creará para las operaciones posteriores
    provision_user: efemaq
    ssh_key_email: "info@efemaq.com.ar"

    # SSH key pública que se agregará al usuario
    # Path relativo desde el directorio del playbook
    ssh_key_path: "{{ playbook_dir }}/../.ssh/id_ed25519.pub"

  pre_tasks:
    - name: Check if SSH public key file exists
      ansible.builtin.stat:
        path: "{{ ssh_key_path }}"
      delegate_to: localhost
      register: ssh_key_stat
      become: false

    - name: Fail with helpful message if SSH key is missing
      ansible.builtin.fail:
        msg: |
          SSH public key not found at: {{ ssh_key_path }}

          Please generate an SSH key pair with:
            ssh-keygen -t ed25519 -C "{{ ssh_key_email }}" -f {{ playbook_dir }}/../.ssh/id_ed25519

          Then re-run this playbook.
      when: not ssh_key_stat.stat.exists

    - name: Load SSH public key content
      ansible.builtin.set_fact:
        provision_user_ssh_key: "{{ lookup('file', ssh_key_path) }}"

    - name: Verify we're not running as the provision user
      ansible.builtin.fail:
        msg: "This playbook should be run with root user, not {{ ansible_user }}"
      when: ansible_user == provision_user

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

  tasks:
    - name: Install required packages
      ansible.builtin.apt:
        name:
          - sudo
          - openssh-server
          - ufw
        state: present
      when: ansible_os_family == "Debian"

    - name: Set timezone
      community.general.timezone:
        name: "{{ timezone }}"

    - name: Create provision user group
      ansible.builtin.group:
        name: "{{ provision_user }}"
        state: present

    - name: Create provision user
      ansible.builtin.user:
        name: "{{ provision_user }}"
        group: "{{ provision_user }}"
        groups: sudo
        append: true
        shell: /bin/bash
        create_home: true
        state: present

    - name: Ensure SSH directory exists for provision user
      ansible.builtin.file:
        path: "/home/{{ provision_user }}/.ssh"
        state: directory
        owner: "{{ provision_user }}"
        group: "{{ provision_user }}"
        mode: '0700'

    - name: Set up authorized SSH key for provision user
      ansible.posix.authorized_key:
        user: "{{ provision_user }}"
        state: present
        key: "{{ provision_user_ssh_key }}"
        exclusive: false

    - name: Allow provision user to have passwordless sudo
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/{{ provision_user }}
        line: "{{ provision_user }} ALL=(ALL) NOPASSWD: ALL"
        state: present
        create: true
        mode: '0440'
        validate: '/usr/sbin/visudo -cf %s'

    # - name: Configure SSH server security
    #   ansible.builtin.lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: "{{ item.regexp }}"
    #     line: "{{ item.line }}"
    #     state: present
    #     validate: '/usr/sbin/sshd -t -f %s'
    #   loop:
    #     - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
    #     - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
    #     - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    #     - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    #   notify: Restart SSH

    - name: Enable UFW
      community.general.ufw:
        state: enabled
        policy: deny
      when: ansible_os_family == "Debian"

    - name: Allow SSH through firewall
      community.general.ufw:
        rule: allow
        port: '22'
        proto: tcp
      when: ansible_os_family == "Debian"

    # - name: Set hostname
    #   ansible.builtin.hostname:
    #     name: "{{ inventory_hostname }}"
    #   when: inventory_hostname is defined

    - name: generate an OpenSSH keypair
      community.crypto.openssh_keypair:
        type: ed25519
        comment: "{{ ssh_key_email }}"
        path: "/home/{{ provision_user }}/.ssh/id_ed25519"
        owner: "{{ provision_user }}"
        group: root

    - name: copy public key from remote to local
      ansible.builtin.fetch:
        src: "/home/{{ provision_user }}/.ssh/id_ed25519.pub"
        dest: "../.secrets/{{ env }}/{{ inventory_hostname }}/{{ provision_user }}/keys/"

  handlers:
    - name: Restart SSH
      ansible.builtin.service:
        name: ssh
        state: restarted

  post_tasks:
    - name: Display bootstrap summary
      ansible.builtin.debug:
        msg:
          - "Bootstrap completed successfully!"
          - "User '{{ provision_user }}' has been created"
          - "SSH key authentication configured"
          - "Passwordless sudo enabled"
          - ""
          - "NEXT STEPS:"
          - "1. Test SSH connection: ssh {{ provision_user }}@{{ ansible_host }}"
          - "2. If successful, run the main playbook: ansible-playbook -i inventories/production/hosts.yml site.yml"
          - ""
          - "IMPORTANT: Keep your current SSH session open until you verify the new user works!"
